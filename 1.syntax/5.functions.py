# *** Функции ***

# функции - это некая "фабрика", которая на вход получает (не всегда) данные и на выходе
# возвращает (не всегда) дргие (переработанные) данные.

# 1 вариант. Функция, которая не принимает ничего и ничего не возвращает

# создание определение функции с именем фанк_1
def func_1():
    name = "John"
    print(name)

# вызов функции фанк_1
# func_1()

# отправление объекта функци с именем фанк_1
# print(func_1)


# 2 вариант. Функция принимающая данные, но не возвращающая данные
# если функция должна принимать на вход данные,
#  то при определении функции нужно определить создать аргументы
def func_2(arg_1, arg_2):
    result = arg_1 + arg_2
    print(result)

# вызов функции с передачей параметров (значений) (позиционная передача параметров)
# func_2(100, 20)

# определение функции с аргументами, имеющими значения по умолчанию
def func_3(c, a=10, b=20):
    res = a + b + c
    print(res)

# позиционная передача параметров 
# (второй параметр замещает значение по умолчанию )
# func_3(100, 200)

# именованная передача параметров
# func_3(10, b=100)


# аргумент, для множественных позиционных параметров
def func_4(*args):
    print(args)
    print(args[0])
    print(args[1])
    print(args[-1])
    res = 0
    for val in args:
        res += val
    print(res)  # сложение всех значений

# func_4(100, 20, 3, 1000, 777)

# аргумент, для множественных именованных параметров
def func_5(**kwargs):
    print(kwargs)

# func_5(x=10, y=5, hello=777)

# 3 вариант. Функция, возвращающая значение
def func_6(name, age):
    s = f"имя: {name}, возраст: {age}"
    return s

# print(func_6("Peter", 25))